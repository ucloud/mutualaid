// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package uerrors

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnSpecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UnSpecified.String() && e.Code == 500
}

func ErrorUnSpecified(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UnSpecified.String(), fmt.Sprintf(format, args...))
}

func IsBadRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BAD_REQUEST.String() && e.Code == 400
}

func ErrorBadRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_BAD_REQUEST.String(), fmt.Sprintf(format, args...))
}

func IsValidator(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VALIDATOR.String() && e.Code == 400
}

func ErrorValidator(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_VALIDATOR.String(), fmt.Sprintf(format, args...))
}

func IsRatelimit(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RATELIMIT.String() && e.Code == 400
}

func ErrorRatelimit(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_RATELIMIT.String(), fmt.Sprintf(format, args...))
}

func IsCircuitbreaker(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CIRCUITBREAKER.String() && e.Code == 400
}

func ErrorCircuitbreaker(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CIRCUITBREAKER.String(), fmt.Sprintf(format, args...))
}

func IsPermissionError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PERMISSION_ERROR.String() && e.Code == 400
}

func ErrorPermissionError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_PERMISSION_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsUnloginError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNLOGIN_ERROR.String() && e.Code == 403
}

func ErrorUnloginError(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_UNLOGIN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInfraDbOpenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_DB_OPEN_ERROR.String() && e.Code == 503
}

func ErrorInfraDbOpenError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_DB_OPEN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInfraDbCreateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_DB_CREATE_ERROR.String() && e.Code == 503
}

func ErrorInfraDbCreateError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_DB_CREATE_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInfraDbUpdateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_DB_UPDATE_ERROR.String() && e.Code == 503
}

func ErrorInfraDbUpdateError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_DB_UPDATE_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInfraDbUpdateConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_DB_UPDATE_CONFLICT.String() && e.Code == 503
}

func ErrorInfraDbUpdateConflict(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_DB_UPDATE_CONFLICT.String(), fmt.Sprintf(format, args...))
}

func IsInfraDbDeleteError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_DB_DELETE_ERROR.String() && e.Code == 503
}

func ErrorInfraDbDeleteError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_DB_DELETE_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInfraDbSelectError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_DB_SELECT_ERROR.String() && e.Code == 503
}

func ErrorInfraDbSelectError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_DB_SELECT_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInfraCacheOpenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_CACHE_OPEN_ERROR.String() && e.Code == 503
}

func ErrorInfraCacheOpenError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_CACHE_OPEN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInfraCacheSetError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_CACHE_SET_ERROR.String() && e.Code == 503
}

func ErrorInfraCacheSetError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_CACHE_SET_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInfraCacheDeleteError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_CACHE_DELETE_ERROR.String() && e.Code == 503
}

func ErrorInfraCacheDeleteError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_CACHE_DELETE_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInfraCacheGetError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_CACHE_GET_ERROR.String() && e.Code == 503
}

func ErrorInfraCacheGetError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_CACHE_GET_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInfraCacheRangeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_CACHE_RANGE_ERROR.String() && e.Code == 503
}

func ErrorInfraCacheRangeError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_CACHE_RANGE_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInfraCacheDataError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_CACHE_DATA_ERROR.String() && e.Code == 503
}

func ErrorInfraCacheDataError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_CACHE_DATA_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInfraDataNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_DATA_NOT_FOUND.String() && e.Code == 503
}

func ErrorInfraDataNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_DATA_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsInfraCacheNeedsRebuild(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_CACHE_NEEDS_REBUILD.String() && e.Code == 503
}

func ErrorInfraCacheNeedsRebuild(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_CACHE_NEEDS_REBUILD.String(), fmt.Sprintf(format, args...))
}

func IsInfraInvalidParam(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_INVALID_PARAM.String() && e.Code == 503
}

func ErrorInfraInvalidParam(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_INVALID_PARAM.String(), fmt.Sprintf(format, args...))
}

func IsInfraJsonMarshalError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_JSON_MARSHAL_ERROR.String() && e.Code == 503
}

func ErrorInfraJsonMarshalError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_JSON_MARSHAL_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInfraJsonUnmarshalError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INFRA_JSON_UNMARSHAL_ERROR.String() && e.Code == 503
}

func ErrorInfraJsonUnmarshalError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_INFRA_JSON_UNMARSHAL_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsBizNotEnoughStock(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BIZ_NOT_ENOUGH_STOCK.String() && e.Code == 404
}

func ErrorBizNotEnoughStock(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_BIZ_NOT_ENOUGH_STOCK.String(), fmt.Sprintf(format, args...))
}

func IsBizDataNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BIZ_DATA_NOT_FOUND.String() && e.Code == 404
}

func ErrorBizDataNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_BIZ_DATA_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsBizOrderAlreadyExisted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BIZ_ORDER_ALREADY_EXISTED.String() && e.Code == 404
}

func ErrorBizOrderAlreadyExisted(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_BIZ_ORDER_ALREADY_EXISTED.String(), fmt.Sprintf(format, args...))
}

func IsBizUpdateConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BIZ_UPDATE_CONFLICT.String() && e.Code == 404
}

func ErrorBizUpdateConflict(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_BIZ_UPDATE_CONFLICT.String(), fmt.Sprintf(format, args...))
}

func IsBizSpuNotAvailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BIZ_SPU_NOT_AVAILABLE.String() && e.Code == 404
}

func ErrorBizSpuNotAvailable(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_BIZ_SPU_NOT_AVAILABLE.String(), fmt.Sprintf(format, args...))
}

func IsBizInvalidParam(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BIZ_INVALID_PARAM.String() && e.Code == 503
}

func ErrorBizInvalidParam(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_BIZ_INVALID_PARAM.String(), fmt.Sprintf(format, args...))
}

func IsBizUserBlock(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BIZ_USER_BLOCK.String() && e.Code == 503
}

func ErrorBizUserBlock(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_BIZ_USER_BLOCK.String(), fmt.Sprintf(format, args...))
}

func IsBizErrorExamineStep(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BIZ_ERROR_EXAMINE_STEP.String() && e.Code == 503
}

func ErrorBizErrorExamineStep(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_BIZ_ERROR_EXAMINE_STEP.String(), fmt.Sprintf(format, args...))
}

func IsBizLoginFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BIZ_LOGIN_FAIL.String() && e.Code == 404
}

func ErrorBizLoginFail(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_BIZ_LOGIN_FAIL.String(), fmt.Sprintf(format, args...))
}

// 订单错误码

func IsBadPaymentMethod(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BAD_PAYMENT_METHOD.String() && e.Code == 400
}

// 订单错误码

func ErrorBadPaymentMethod(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_BAD_PAYMENT_METHOD.String(), fmt.Sprintf(format, args...))
}

func IsBuyerIdAbsent(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BUYER_ID_ABSENT.String() && e.Code == 400
}

func ErrorBuyerIdAbsent(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_BUYER_ID_ABSENT.String(), fmt.Sprintf(format, args...))
}

func IsCompanyIdAbsent(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_COMPANY_ID_ABSENT.String() && e.Code == 400
}

func ErrorCompanyIdAbsent(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_COMPANY_ID_ABSENT.String(), fmt.Sprintf(format, args...))
}

func IsOrderLineAbsent(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_LINE_ABSENT.String() && e.Code == 400
}

func ErrorOrderLineAbsent(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_LINE_ABSENT.String(), fmt.Sprintf(format, args...))
}

func IsOrderSkuQtyAbsent(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_SKU_QTY_ABSENT.String() && e.Code == 400
}

func ErrorOrderSkuQtyAbsent(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_SKU_QTY_ABSENT.String(), fmt.Sprintf(format, args...))
}

func IsOrderSkuQtyWithCouponExceeded(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_SKU_QTY_WITH_COUPON_EXCEEDED.String() && e.Code == 400
}

func ErrorOrderSkuQtyWithCouponExceeded(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_SKU_QTY_WITH_COUPON_EXCEEDED.String(), fmt.Sprintf(format, args...))
}

func IsOrderSkuQtyExceeded(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_SKU_QTY_EXCEEDED.String() && e.Code == 400
}

func ErrorOrderSkuQtyExceeded(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_SKU_QTY_EXCEEDED.String(), fmt.Sprintf(format, args...))
}

func IsOrderCouponUnavailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_COUPON_UNAVAILABLE.String() && e.Code == 400
}

func ErrorOrderCouponUnavailable(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_COUPON_UNAVAILABLE.String(), fmt.Sprintf(format, args...))
}

func IsOrderRecipientAbsent(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_RECIPIENT_ABSENT.String() && e.Code == 400
}

func ErrorOrderRecipientAbsent(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_RECIPIENT_ABSENT.String(), fmt.Sprintf(format, args...))
}

func IsOrderRecipientNameAbsent(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_RECIPIENT_NAME_ABSENT.String() && e.Code == 400
}

func ErrorOrderRecipientNameAbsent(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_RECIPIENT_NAME_ABSENT.String(), fmt.Sprintf(format, args...))
}

func IsOrderRecipientEmailAbsent(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_RECIPIENT_EMAIL_ABSENT.String() && e.Code == 400
}

func ErrorOrderRecipientEmailAbsent(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_RECIPIENT_EMAIL_ABSENT.String(), fmt.Sprintf(format, args...))
}

func IsOrderRecipientContactAbsent(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_RECIPIENT_CONTACT_ABSENT.String() && e.Code == 400
}

func ErrorOrderRecipientContactAbsent(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_RECIPIENT_CONTACT_ABSENT.String(), fmt.Sprintf(format, args...))
}

func IsOrderRecipientAddrAbsent(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_RECIPIENT_ADDR_ABSENT.String() && e.Code == 400
}

func ErrorOrderRecipientAddrAbsent(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_RECIPIENT_ADDR_ABSENT.String(), fmt.Sprintf(format, args...))
}

func IsOrderDataNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_DATA_NOT_FOUND.String() && e.Code == 400
}

func ErrorOrderDataNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_DATA_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsShipperDataNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SHIPPER_DATA_NOT_FOUND.String() && e.Code == 400
}

func ErrorShipperDataNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_SHIPPER_DATA_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsMailTypeUnsupported(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MAIL_TYPE_UNSUPPORTED.String() && e.Code == 400
}

func ErrorMailTypeUnsupported(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_MAIL_TYPE_UNSUPPORTED.String(), fmt.Sprintf(format, args...))
}

func IsOrderCouponUsed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_COUPON_USED.String() && e.Code == 400
}

func ErrorOrderCouponUsed(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_COUPON_USED.String(), fmt.Sprintf(format, args...))
}

func IsOrderCouponQtyExceeded(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_COUPON_QTY_EXCEEDED.String() && e.Code == 400
}

func ErrorOrderCouponQtyExceeded(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_COUPON_QTY_EXCEEDED.String(), fmt.Sprintf(format, args...))
}

func IsOrderCouponExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_COUPON_EXPIRED.String() && e.Code == 400
}

func ErrorOrderCouponExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_COUPON_EXPIRED.String(), fmt.Sprintf(format, args...))
}

func IsOrderHasCreated(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORDER_HAS_CREATED.String() && e.Code == 400
}

func ErrorOrderHasCreated(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ORDER_HAS_CREATED.String(), fmt.Sprintf(format, args...))
}

func IsFailToSaveDataIntoDb(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_SAVE_DATA_INTO_DB.String() && e.Code == 500
}

func ErrorFailToSaveDataIntoDb(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_SAVE_DATA_INTO_DB.String(), fmt.Sprintf(format, args...))
}

func IsFailToRetrievePrice(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_RETRIEVE_PRICE.String() && e.Code == 500
}

func ErrorFailToRetrievePrice(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_RETRIEVE_PRICE.String(), fmt.Sprintf(format, args...))
}

func IsFailToReduceInventory(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_REDUCE_INVENTORY.String() && e.Code == 500
}

func ErrorFailToReduceInventory(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_REDUCE_INVENTORY.String(), fmt.Sprintf(format, args...))
}

func IsFailToAllocateResource(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_ALLOCATE_RESOURCE.String() && e.Code == 500
}

func ErrorFailToAllocateResource(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_ALLOCATE_RESOURCE.String(), fmt.Sprintf(format, args...))
}

func IsFailToPrepayWxpay(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_PREPAY_WXPAY.String() && e.Code == 500
}

func ErrorFailToPrepayWxpay(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_PREPAY_WXPAY.String(), fmt.Sprintf(format, args...))
}

func IsFailToQueryWxpay(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_QUERY_WXPAY.String() && e.Code == 500
}

func ErrorFailToQueryWxpay(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_QUERY_WXPAY.String(), fmt.Sprintf(format, args...))
}

func IsFailToCreateMqMessage(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_CREATE_MQ_MESSAGE.String() && e.Code == 500
}

func ErrorFailToCreateMqMessage(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_CREATE_MQ_MESSAGE.String(), fmt.Sprintf(format, args...))
}

func IsProductDataNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PRODUCT_DATA_NOT_FOUND.String() && e.Code == 500
}

func ErrorProductDataNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_PRODUCT_DATA_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsFailToSendMqMessage(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_SEND_MQ_MESSAGE.String() && e.Code == 500
}

func ErrorFailToSendMqMessage(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_SEND_MQ_MESSAGE.String(), fmt.Sprintf(format, args...))
}

func IsFailToPushMessage(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_PUSH_MESSAGE.String() && e.Code == 500
}

func ErrorFailToPushMessage(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_PUSH_MESSAGE.String(), fmt.Sprintf(format, args...))
}

func IsFailToGetUserPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_GET_USER_PASSWORD.String() && e.Code == 500
}

func ErrorFailToGetUserPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_GET_USER_PASSWORD.String(), fmt.Sprintf(format, args...))
}

func IsFailToRevokeInventory(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_REVOKE_INVENTORY.String() && e.Code == 500
}

func ErrorFailToRevokeInventory(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_REVOKE_INVENTORY.String(), fmt.Sprintf(format, args...))
}

// spu 不可用

func IsSpuNotAvailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SPU_NOT_AVAILABLE.String() && e.Code == 500
}

// spu 不可用

func ErrorSpuNotAvailable(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SPU_NOT_AVAILABLE.String(), fmt.Sprintf(format, args...))
}

// 后台订单错误码

func IsFailToGetOrderList(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_GET_ORDER_LIST.String() && e.Code == 500
}

// 后台订单错误码

func ErrorFailToGetOrderList(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_GET_ORDER_LIST.String(), fmt.Sprintf(format, args...))
}

func IsFailToGetOrderLine(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_GET_ORDER_LINE.String() && e.Code == 500
}

func ErrorFailToGetOrderLine(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_GET_ORDER_LINE.String(), fmt.Sprintf(format, args...))
}

func IsFailToShipOrder(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAIL_TO_SHIP_ORDER.String() && e.Code == 500
}

func ErrorFailToShipOrder(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAIL_TO_SHIP_ORDER.String(), fmt.Sprintf(format, args...))
}
