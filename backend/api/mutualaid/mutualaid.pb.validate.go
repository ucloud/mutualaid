// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/mutualaid/mutualaid.proto

package mutualaid

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WxOAuth2Req with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WxOAuth2Req) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WxOAuth2Req with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WxOAuth2ReqMultiError, or
// nil if none found.
func (m *WxOAuth2Req) ValidateAll() error {
	return m.validate(true)
}

func (m *WxOAuth2Req) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for State

	// no validation rules for Openid

	if len(errors) > 0 {
		return WxOAuth2ReqMultiError(errors)
	}

	return nil
}

// WxOAuth2ReqMultiError is an error wrapping multiple validation errors
// returned by WxOAuth2Req.ValidateAll() if the designated constraints aren't met.
type WxOAuth2ReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WxOAuth2ReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WxOAuth2ReqMultiError) AllErrors() []error { return m }

// WxOAuth2ReqValidationError is the validation error returned by
// WxOAuth2Req.Validate if the designated constraints aren't met.
type WxOAuth2ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WxOAuth2ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WxOAuth2ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WxOAuth2ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WxOAuth2ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WxOAuth2ReqValidationError) ErrorName() string { return "WxOAuth2ReqValidationError" }

// Error satisfies the builtin error interface
func (e WxOAuth2ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWxOAuth2Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WxOAuth2ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WxOAuth2ReqValidationError{}

// Validate checks the field values on WxOAuth2Resp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WxOAuth2Resp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WxOAuth2Resp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WxOAuth2RespMultiError, or
// nil if none found.
func (m *WxOAuth2Resp) ValidateAll() error {
	return m.validate(true)
}

func (m *WxOAuth2Resp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WxOAuth2RespMultiError(errors)
	}

	return nil
}

// WxOAuth2RespMultiError is an error wrapping multiple validation errors
// returned by WxOAuth2Resp.ValidateAll() if the designated constraints aren't met.
type WxOAuth2RespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WxOAuth2RespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WxOAuth2RespMultiError) AllErrors() []error { return m }

// WxOAuth2RespValidationError is the validation error returned by
// WxOAuth2Resp.Validate if the designated constraints aren't met.
type WxOAuth2RespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WxOAuth2RespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WxOAuth2RespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WxOAuth2RespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WxOAuth2RespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WxOAuth2RespValidationError) ErrorName() string { return "WxOAuth2RespValidationError" }

// Error satisfies the builtin error interface
func (e WxOAuth2RespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWxOAuth2Resp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WxOAuth2RespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WxOAuth2RespValidationError{}

// Validate checks the field values on WxLoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WxLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WxLoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WxLoginReqMultiError, or
// nil if none found.
func (m *WxLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *WxLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LoginCode

	// no validation rules for Name

	if len(errors) > 0 {
		return WxLoginReqMultiError(errors)
	}

	return nil
}

// WxLoginReqMultiError is an error wrapping multiple validation errors
// returned by WxLoginReq.ValidateAll() if the designated constraints aren't met.
type WxLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WxLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WxLoginReqMultiError) AllErrors() []error { return m }

// WxLoginReqValidationError is the validation error returned by
// WxLoginReq.Validate if the designated constraints aren't met.
type WxLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WxLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WxLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WxLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WxLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WxLoginReqValidationError) ErrorName() string { return "WxLoginReqValidationError" }

// Error satisfies the builtin error interface
func (e WxLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWxLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WxLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WxLoginReqValidationError{}

// Validate checks the field values on ExamineLoginReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExamineLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamineLoginReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExamineLoginReqMultiError, or nil if none found.
func (m *ExamineLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamineLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return ExamineLoginReqMultiError(errors)
	}

	return nil
}

// ExamineLoginReqMultiError is an error wrapping multiple validation errors
// returned by ExamineLoginReq.ValidateAll() if the designated constraints
// aren't met.
type ExamineLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamineLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamineLoginReqMultiError) AllErrors() []error { return m }

// ExamineLoginReqValidationError is the validation error returned by
// ExamineLoginReq.Validate if the designated constraints aren't met.
type ExamineLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamineLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamineLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamineLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamineLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamineLoginReqValidationError) ErrorName() string { return "ExamineLoginReqValidationError" }

// Error satisfies the builtin error interface
func (e ExamineLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamineLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamineLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamineLoginReqValidationError{}

// Validate checks the field values on ExamineLoginResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExamineLoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamineLoginResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExamineLoginRespMultiError, or nil if none found.
func (m *ExamineLoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamineLoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExamineLoginRespMultiError(errors)
	}

	return nil
}

// ExamineLoginRespMultiError is an error wrapping multiple validation errors
// returned by ExamineLoginResp.ValidateAll() if the designated constraints
// aren't met.
type ExamineLoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamineLoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamineLoginRespMultiError) AllErrors() []error { return m }

// ExamineLoginRespValidationError is the validation error returned by
// ExamineLoginResp.Validate if the designated constraints aren't met.
type ExamineLoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamineLoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamineLoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamineLoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamineLoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamineLoginRespValidationError) ErrorName() string { return "ExamineLoginRespValidationError" }

// Error satisfies the builtin error interface
func (e ExamineLoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamineLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamineLoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamineLoginRespValidationError{}

// Validate checks the field values on WxLoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WxLoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WxLoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WxLoginRespMultiError, or
// nil if none found.
func (m *WxLoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *WxLoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NeedActive

	if len(errors) > 0 {
		return WxLoginRespMultiError(errors)
	}

	return nil
}

// WxLoginRespMultiError is an error wrapping multiple validation errors
// returned by WxLoginResp.ValidateAll() if the designated constraints aren't met.
type WxLoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WxLoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WxLoginRespMultiError) AllErrors() []error { return m }

// WxLoginRespValidationError is the validation error returned by
// WxLoginResp.Validate if the designated constraints aren't met.
type WxLoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WxLoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WxLoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WxLoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WxLoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WxLoginRespValidationError) ErrorName() string { return "WxLoginRespValidationError" }

// Error satisfies the builtin error interface
func (e WxLoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWxLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WxLoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WxLoginRespValidationError{}

// Validate checks the field values on WxPhoneNumberReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WxPhoneNumberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WxPhoneNumberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WxPhoneNumberReqMultiError, or nil if none found.
func (m *WxPhoneNumberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *WxPhoneNumberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneCode

	if len(errors) > 0 {
		return WxPhoneNumberReqMultiError(errors)
	}

	return nil
}

// WxPhoneNumberReqMultiError is an error wrapping multiple validation errors
// returned by WxPhoneNumberReq.ValidateAll() if the designated constraints
// aren't met.
type WxPhoneNumberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WxPhoneNumberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WxPhoneNumberReqMultiError) AllErrors() []error { return m }

// WxPhoneNumberReqValidationError is the validation error returned by
// WxPhoneNumberReq.Validate if the designated constraints aren't met.
type WxPhoneNumberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WxPhoneNumberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WxPhoneNumberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WxPhoneNumberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WxPhoneNumberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WxPhoneNumberReqValidationError) ErrorName() string { return "WxPhoneNumberReqValidationError" }

// Error satisfies the builtin error interface
func (e WxPhoneNumberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWxPhoneNumberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WxPhoneNumberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WxPhoneNumberReqValidationError{}

// Validate checks the field values on WxPhoneNumberResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WxPhoneNumberResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WxPhoneNumberResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WxPhoneNumberRespMultiError, or nil if none found.
func (m *WxPhoneNumberResp) ValidateAll() error {
	return m.validate(true)
}

func (m *WxPhoneNumberResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	if len(errors) > 0 {
		return WxPhoneNumberRespMultiError(errors)
	}

	return nil
}

// WxPhoneNumberRespMultiError is an error wrapping multiple validation errors
// returned by WxPhoneNumberResp.ValidateAll() if the designated constraints
// aren't met.
type WxPhoneNumberRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WxPhoneNumberRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WxPhoneNumberRespMultiError) AllErrors() []error { return m }

// WxPhoneNumberRespValidationError is the validation error returned by
// WxPhoneNumberResp.Validate if the designated constraints aren't met.
type WxPhoneNumberRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WxPhoneNumberRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WxPhoneNumberRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WxPhoneNumberRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WxPhoneNumberRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WxPhoneNumberRespValidationError) ErrorName() string {
	return "WxPhoneNumberRespValidationError"
}

// Error satisfies the builtin error interface
func (e WxPhoneNumberRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWxPhoneNumberResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WxPhoneNumberRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WxPhoneNumberRespValidationError{}

// Validate checks the field values on ActiveUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActiveUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActiveUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActiveUserReqMultiError, or
// nil if none found.
func (m *ActiveUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ActiveUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LoginCode

	// no validation rules for PhoneCode

	// no validation rules for OpenId

	// no validation rules for Addr

	// no validation rules for Longitude

	// no validation rules for Latitude

	// no validation rules for Name

	// no validation rules for Icon

	if len(errors) > 0 {
		return ActiveUserReqMultiError(errors)
	}

	return nil
}

// ActiveUserReqMultiError is an error wrapping multiple validation errors
// returned by ActiveUserReq.ValidateAll() if the designated constraints
// aren't met.
type ActiveUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActiveUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActiveUserReqMultiError) AllErrors() []error { return m }

// ActiveUserReqValidationError is the validation error returned by
// ActiveUserReq.Validate if the designated constraints aren't met.
type ActiveUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActiveUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActiveUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActiveUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActiveUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActiveUserReqValidationError) ErrorName() string { return "ActiveUserReqValidationError" }

// Error satisfies the builtin error interface
func (e ActiveUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActiveUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActiveUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActiveUserReqValidationError{}

// Validate checks the field values on ActiveUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActiveUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActiveUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActiveUserRespMultiError,
// or nil if none found.
func (m *ActiveUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ActiveUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ActiveUserRespMultiError(errors)
	}

	return nil
}

// ActiveUserRespMultiError is an error wrapping multiple validation errors
// returned by ActiveUserResp.ValidateAll() if the designated constraints
// aren't met.
type ActiveUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActiveUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActiveUserRespMultiError) AllErrors() []error { return m }

// ActiveUserRespValidationError is the validation error returned by
// ActiveUserResp.Validate if the designated constraints aren't met.
type ActiveUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActiveUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActiveUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActiveUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActiveUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActiveUserRespValidationError) ErrorName() string { return "ActiveUserRespValidationError" }

// Error satisfies the builtin error interface
func (e ActiveUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActiveUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActiveUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActiveUserRespValidationError{}

// Validate checks the field values on GetUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReqMultiError, or
// nil if none found.
func (m *GetUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserReqMultiError(errors)
	}

	return nil
}

// GetUserReqMultiError is an error wrapping multiple validation errors
// returned by GetUserReq.ValidateAll() if the designated constraints aren't met.
type GetUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReqMultiError) AllErrors() []error { return m }

// GetUserReqValidationError is the validation error returned by
// GetUserReq.Validate if the designated constraints aren't met.
type GetUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReqValidationError) ErrorName() string { return "GetUserReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReqValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for Icon

	// no validation rules for Addr

	// no validation rules for Status

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on GetUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRespMultiError, or
// nil if none found.
func (m *GetUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserRespValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserRespValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserRespValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserRespMultiError(errors)
	}

	return nil
}

// GetUserRespMultiError is an error wrapping multiple validation errors
// returned by GetUserResp.ValidateAll() if the designated constraints aren't met.
type GetUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRespMultiError) AllErrors() []error { return m }

// GetUserRespValidationError is the validation error returned by
// GetUserResp.Validate if the designated constraints aren't met.
type GetUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRespValidationError) ErrorName() string { return "GetUserRespValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRespValidationError{}

// Validate checks the field values on JSAPISignReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JSAPISignReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JSAPISignReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JSAPISignReqMultiError, or
// nil if none found.
func (m *JSAPISignReq) ValidateAll() error {
	return m.validate(true)
}

func (m *JSAPISignReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiUrl

	if len(errors) > 0 {
		return JSAPISignReqMultiError(errors)
	}

	return nil
}

// JSAPISignReqMultiError is an error wrapping multiple validation errors
// returned by JSAPISignReq.ValidateAll() if the designated constraints aren't met.
type JSAPISignReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JSAPISignReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JSAPISignReqMultiError) AllErrors() []error { return m }

// JSAPISignReqValidationError is the validation error returned by
// JSAPISignReq.Validate if the designated constraints aren't met.
type JSAPISignReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JSAPISignReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JSAPISignReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JSAPISignReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JSAPISignReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JSAPISignReqValidationError) ErrorName() string { return "JSAPISignReqValidationError" }

// Error satisfies the builtin error interface
func (e JSAPISignReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJSAPISignReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JSAPISignReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JSAPISignReqValidationError{}

// Validate checks the field values on JSAPISignResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JSAPISignResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JSAPISignResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JSAPISignRespMultiError, or
// nil if none found.
func (m *JSAPISignResp) ValidateAll() error {
	return m.validate(true)
}

func (m *JSAPISignResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Noncestr

	// no validation rules for Timestamp

	// no validation rules for Sign

	if len(errors) > 0 {
		return JSAPISignRespMultiError(errors)
	}

	return nil
}

// JSAPISignRespMultiError is an error wrapping multiple validation errors
// returned by JSAPISignResp.ValidateAll() if the designated constraints
// aren't met.
type JSAPISignRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JSAPISignRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JSAPISignRespMultiError) AllErrors() []error { return m }

// JSAPISignRespValidationError is the validation error returned by
// JSAPISignResp.Validate if the designated constraints aren't met.
type JSAPISignRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JSAPISignRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JSAPISignRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JSAPISignRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JSAPISignRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JSAPISignRespValidationError) ErrorName() string { return "JSAPISignRespValidationError" }

// Error satisfies the builtin error interface
func (e JSAPISignRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJSAPISignResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JSAPISignRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JSAPISignRespValidationError{}

// Validate checks the field values on DiscoveryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DiscoveryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoveryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiscoveryReqMultiError, or
// nil if none found.
func (m *DiscoveryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoveryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLatitude(); val < -90 || val >= 90 {
		err := DiscoveryReqValidationError{
			field:  "Latitude",
			reason: "value must be inside range [-90, 90)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLongitude(); val < -180 || val >= 180 {
		err := DiscoveryReqValidationError{
			field:  "Longitude",
			reason: "value must be inside range [-180, 180)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	if _, ok := _DiscoveryReq_PageSize_InLookup[m.GetPageSize()]; !ok {
		err := DiscoveryReqValidationError{
			field:  "PageSize",
			reason: "value must be in list [10 20 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DiscoveryReqMultiError(errors)
	}

	return nil
}

// DiscoveryReqMultiError is an error wrapping multiple validation errors
// returned by DiscoveryReq.ValidateAll() if the designated constraints aren't met.
type DiscoveryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoveryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoveryReqMultiError) AllErrors() []error { return m }

// DiscoveryReqValidationError is the validation error returned by
// DiscoveryReq.Validate if the designated constraints aren't met.
type DiscoveryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryReqValidationError) ErrorName() string { return "DiscoveryReqValidationError" }

// Error satisfies the builtin error interface
func (e DiscoveryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryReqValidationError{}

var _DiscoveryReq_PageSize_InLookup = map[int32]struct{}{
	10: {},
	20: {},
	50: {},
}

// Validate checks the field values on DiscoveryResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DiscoveryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoveryResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiscoveryRespMultiError, or
// nil if none found.
func (m *DiscoveryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoveryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscoveryRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscoveryRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscoveryRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return DiscoveryRespMultiError(errors)
	}

	return nil
}

// DiscoveryRespMultiError is an error wrapping multiple validation errors
// returned by DiscoveryResp.ValidateAll() if the designated constraints
// aren't met.
type DiscoveryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoveryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoveryRespMultiError) AllErrors() []error { return m }

// DiscoveryRespValidationError is the validation error returned by
// DiscoveryResp.Validate if the designated constraints aren't met.
type DiscoveryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryRespValidationError) ErrorName() string { return "DiscoveryRespValidationError" }

// Error satisfies the builtin error interface
func (e DiscoveryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryRespValidationError{}

// Validate checks the field values on GetExamineListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetExamineListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExamineListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExamineListReqMultiError, or nil if none found.
func (m *GetExamineListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExamineListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNumber

	if _, ok := _GetExamineListReq_PageSize_InLookup[m.GetPageSize()]; !ok {
		err := GetExamineListReqValidationError{
			field:  "PageSize",
			reason: "value must be in list [10 20 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ExamineStatus

	if _, ok := _GetExamineListReq_ExamineStatusOrder_InLookup[m.GetExamineStatusOrder()]; !ok {
		err := GetExamineListReqValidationError{
			field:  "ExamineStatusOrder",
			reason: "value must be in list [DESC ASC]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExamineStatusOrder()); l < 0 || l > 4 {
		err := GetExamineListReqValidationError{
			field:  "ExamineStatusOrder",
			reason: "value length must be between 0 and 4 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetExamineListReq_CreateTimeOrder_InLookup[m.GetCreateTimeOrder()]; !ok {
		err := GetExamineListReqValidationError{
			field:  "CreateTimeOrder",
			reason: "value must be in list [DESC ASC]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCreateTimeOrder()); l < 0 || l > 4 {
		err := GetExamineListReqValidationError{
			field:  "CreateTimeOrder",
			reason: "value length must be between 0 and 4 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetExamineListReq_UpdateTimeOrder_InLookup[m.GetUpdateTimeOrder()]; !ok {
		err := GetExamineListReqValidationError{
			field:  "UpdateTimeOrder",
			reason: "value must be in list [DESC ASC]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUpdateTimeOrder()); l < 0 || l > 4 {
		err := GetExamineListReqValidationError{
			field:  "UpdateTimeOrder",
			reason: "value length must be between 0 and 4 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for VagueSearch

	if len(errors) > 0 {
		return GetExamineListReqMultiError(errors)
	}

	return nil
}

// GetExamineListReqMultiError is an error wrapping multiple validation errors
// returned by GetExamineListReq.ValidateAll() if the designated constraints
// aren't met.
type GetExamineListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExamineListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExamineListReqMultiError) AllErrors() []error { return m }

// GetExamineListReqValidationError is the validation error returned by
// GetExamineListReq.Validate if the designated constraints aren't met.
type GetExamineListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExamineListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExamineListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExamineListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExamineListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExamineListReqValidationError) ErrorName() string {
	return "GetExamineListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetExamineListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExamineListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExamineListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExamineListReqValidationError{}

var _GetExamineListReq_PageSize_InLookup = map[int32]struct{}{
	10: {},
	20: {},
	50: {},
}

var _GetExamineListReq_ExamineStatusOrder_InLookup = map[string]struct{}{
	"DESC": {},
	"ASC":  {},
}

var _GetExamineListReq_CreateTimeOrder_InLookup = map[string]struct{}{
	"DESC": {},
	"ASC":  {},
}

var _GetExamineListReq_UpdateTimeOrder_InLookup = map[string]struct{}{
	"DESC": {},
	"ASC":  {},
}

// Validate checks the field values on ExamineListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExamineListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamineListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExamineListRespMultiError, or nil if none found.
func (m *ExamineListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamineListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamineListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamineListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamineListRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalSize

	// no validation rules for WaitingSize

	// no validation rules for PassSize

	// no validation rules for BlockSize

	if len(errors) > 0 {
		return ExamineListRespMultiError(errors)
	}

	return nil
}

// ExamineListRespMultiError is an error wrapping multiple validation errors
// returned by ExamineListResp.ValidateAll() if the designated constraints
// aren't met.
type ExamineListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamineListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamineListRespMultiError) AllErrors() []error { return m }

// ExamineListRespValidationError is the validation error returned by
// ExamineListResp.Validate if the designated constraints aren't met.
type ExamineListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamineListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamineListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamineListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamineListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamineListRespValidationError) ErrorName() string { return "ExamineListRespValidationError" }

// Error satisfies the builtin error interface
func (e ExamineListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamineListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamineListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamineListRespValidationError{}

// Validate checks the field values on ExamineAidReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExamineAidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamineAidReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExamineAidReqMultiError, or
// nil if none found.
func (m *ExamineAidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamineAidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if _, ok := _ExamineAidReq_ExamineAction_InLookup[m.GetExamineAction()]; !ok {
		err := ExamineAidReqValidationError{
			field:  "ExamineAction",
			reason: "value must be in list [PASS BLOCK UNBLOCK]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExamineAction()); l < 0 || l > 8 {
		err := ExamineAidReqValidationError{
			field:  "ExamineAction",
			reason: "value length must be between 0 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExamineAidReqMultiError(errors)
	}

	return nil
}

// ExamineAidReqMultiError is an error wrapping multiple validation errors
// returned by ExamineAidReq.ValidateAll() if the designated constraints
// aren't met.
type ExamineAidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamineAidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamineAidReqMultiError) AllErrors() []error { return m }

// ExamineAidReqValidationError is the validation error returned by
// ExamineAidReq.Validate if the designated constraints aren't met.
type ExamineAidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamineAidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamineAidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamineAidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamineAidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamineAidReqValidationError) ErrorName() string { return "ExamineAidReqValidationError" }

// Error satisfies the builtin error interface
func (e ExamineAidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamineAidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamineAidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamineAidReqValidationError{}

var _ExamineAidReq_ExamineAction_InLookup = map[string]struct{}{
	"PASS":    {},
	"BLOCK":   {},
	"UNBLOCK": {},
}

// Validate checks the field values on ExamineAidResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExamineAidResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExamineAidResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExamineAidRespMultiError,
// or nil if none found.
func (m *ExamineAidResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ExamineAidResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExamineAidRespMultiError(errors)
	}

	return nil
}

// ExamineAidRespMultiError is an error wrapping multiple validation errors
// returned by ExamineAidResp.ValidateAll() if the designated constraints
// aren't met.
type ExamineAidRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamineAidRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamineAidRespMultiError) AllErrors() []error { return m }

// ExamineAidRespValidationError is the validation error returned by
// ExamineAidResp.Validate if the designated constraints aren't met.
type ExamineAidRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamineAidRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamineAidRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamineAidRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamineAidRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamineAidRespValidationError) ErrorName() string { return "ExamineAidRespValidationError" }

// Error satisfies the builtin error interface
func (e ExamineAidRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamineAidResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamineAidRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamineAidRespValidationError{}

// Validate checks the field values on BlockUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockUserReqMultiError, or
// nil if none found.
func (m *BlockUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return BlockUserReqMultiError(errors)
	}

	return nil
}

// BlockUserReqMultiError is an error wrapping multiple validation errors
// returned by BlockUserReq.ValidateAll() if the designated constraints aren't met.
type BlockUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockUserReqMultiError) AllErrors() []error { return m }

// BlockUserReqValidationError is the validation error returned by
// BlockUserReq.Validate if the designated constraints aren't met.
type BlockUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockUserReqValidationError) ErrorName() string { return "BlockUserReqValidationError" }

// Error satisfies the builtin error interface
func (e BlockUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockUserReqValidationError{}

// Validate checks the field values on BlockUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockUserRespMultiError, or
// nil if none found.
func (m *BlockUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BlockUserRespMultiError(errors)
	}

	return nil
}

// BlockUserRespMultiError is an error wrapping multiple validation errors
// returned by BlockUserResp.ValidateAll() if the designated constraints
// aren't met.
type BlockUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockUserRespMultiError) AllErrors() []error { return m }

// BlockUserRespValidationError is the validation error returned by
// BlockUserResp.Validate if the designated constraints aren't met.
type BlockUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockUserRespValidationError) ErrorName() string { return "BlockUserRespValidationError" }

// Error satisfies the builtin error interface
func (e BlockUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockUserRespValidationError{}

// Validate checks the field values on PassUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PassUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PassUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PassUserReqMultiError, or
// nil if none found.
func (m *PassUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PassUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return PassUserReqMultiError(errors)
	}

	return nil
}

// PassUserReqMultiError is an error wrapping multiple validation errors
// returned by PassUserReq.ValidateAll() if the designated constraints aren't met.
type PassUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PassUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PassUserReqMultiError) AllErrors() []error { return m }

// PassUserReqValidationError is the validation error returned by
// PassUserReq.Validate if the designated constraints aren't met.
type PassUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PassUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PassUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PassUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PassUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PassUserReqValidationError) ErrorName() string { return "PassUserReqValidationError" }

// Error satisfies the builtin error interface
func (e PassUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPassUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PassUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PassUserReqValidationError{}

// Validate checks the field values on PassUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PassUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PassUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PassUserRespMultiError, or
// nil if none found.
func (m *PassUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PassUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PassUserRespMultiError(errors)
	}

	return nil
}

// PassUserRespMultiError is an error wrapping multiple validation errors
// returned by PassUserResp.ValidateAll() if the designated constraints aren't met.
type PassUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PassUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PassUserRespMultiError) AllErrors() []error { return m }

// PassUserRespValidationError is the validation error returned by
// PassUserResp.Validate if the designated constraints aren't met.
type PassUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PassUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PassUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PassUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PassUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PassUserRespValidationError) ErrorName() string { return "PassUserRespValidationError" }

// Error satisfies the builtin error interface
func (e PassUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPassUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PassUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PassUserRespValidationError{}

// Validate checks the field values on GetBlockUserListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBlockUserListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlockUserListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlockUserListReqMultiError, or nil if none found.
func (m *GetBlockUserListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlockUserListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetBlockUserListReqMultiError(errors)
	}

	return nil
}

// GetBlockUserListReqMultiError is an error wrapping multiple validation
// errors returned by GetBlockUserListReq.ValidateAll() if the designated
// constraints aren't met.
type GetBlockUserListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlockUserListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlockUserListReqMultiError) AllErrors() []error { return m }

// GetBlockUserListReqValidationError is the validation error returned by
// GetBlockUserListReq.Validate if the designated constraints aren't met.
type GetBlockUserListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockUserListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockUserListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockUserListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockUserListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockUserListReqValidationError) ErrorName() string {
	return "GetBlockUserListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetBlockUserListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockUserListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockUserListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockUserListReqValidationError{}

// Validate checks the field values on GetBlockUserListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBlockUserListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlockUserListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlockUserListRespMultiError, or nil if none found.
func (m *GetBlockUserListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlockUserListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBlockUserListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBlockUserListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBlockUserListRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBlockUserListRespMultiError(errors)
	}

	return nil
}

// GetBlockUserListRespMultiError is an error wrapping multiple validation
// errors returned by GetBlockUserListResp.ValidateAll() if the designated
// constraints aren't met.
type GetBlockUserListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlockUserListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlockUserListRespMultiError) AllErrors() []error { return m }

// GetBlockUserListRespValidationError is the validation error returned by
// GetBlockUserListResp.Validate if the designated constraints aren't met.
type GetBlockUserListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockUserListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockUserListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockUserListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockUserListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockUserListRespValidationError) ErrorName() string {
	return "GetBlockUserListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetBlockUserListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockUserListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockUserListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockUserListRespValidationError{}

// Validate checks the field values on BlockUserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockUserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockUserInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockUserInfoMultiError, or
// nil if none found.
func (m *BlockUserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockUserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for Icon

	// no validation rules for Addr

	// no validation rules for Id

	// no validation rules for CreateTime

	// no validation rules for Status

	if len(errors) > 0 {
		return BlockUserInfoMultiError(errors)
	}

	return nil
}

// BlockUserInfoMultiError is an error wrapping multiple validation errors
// returned by BlockUserInfo.ValidateAll() if the designated constraints
// aren't met.
type BlockUserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockUserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockUserInfoMultiError) AllErrors() []error { return m }

// BlockUserInfoValidationError is the validation error returned by
// BlockUserInfo.Validate if the designated constraints aren't met.
type BlockUserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockUserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockUserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockUserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockUserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockUserInfoValidationError) ErrorName() string { return "BlockUserInfoValidationError" }

// Error satisfies the builtin error interface
func (e BlockUserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockUserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockUserInfoValidationError{}

// Validate checks the field values on ListAidOfferedReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAidOfferedReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAidOfferedReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAidOfferedReqMultiError, or nil if none found.
func (m *ListAidOfferedReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAidOfferedReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if val := m.GetLatitude(); val < -90 || val >= 90 {
		err := ListAidOfferedReqValidationError{
			field:  "Latitude",
			reason: "value must be inside range [-90, 90)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLongitude(); val < -180 || val >= 180 {
		err := ListAidOfferedReqValidationError{
			field:  "Longitude",
			reason: "value must be inside range [-180, 180)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAidOfferedReqMultiError(errors)
	}

	return nil
}

// ListAidOfferedReqMultiError is an error wrapping multiple validation errors
// returned by ListAidOfferedReq.ValidateAll() if the designated constraints
// aren't met.
type ListAidOfferedReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAidOfferedReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAidOfferedReqMultiError) AllErrors() []error { return m }

// ListAidOfferedReqValidationError is the validation error returned by
// ListAidOfferedReq.Validate if the designated constraints aren't met.
type ListAidOfferedReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAidOfferedReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAidOfferedReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAidOfferedReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAidOfferedReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAidOfferedReqValidationError) ErrorName() string {
	return "ListAidOfferedReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListAidOfferedReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAidOfferedReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAidOfferedReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAidOfferedReqValidationError{}

// Validate checks the field values on ListAidOfferedResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAidOfferedResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAidOfferedResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAidOfferedRespMultiError, or nil if none found.
func (m *ListAidOfferedResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAidOfferedResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAidOfferedRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAidOfferedRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAidOfferedRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListAidOfferedRespMultiError(errors)
	}

	return nil
}

// ListAidOfferedRespMultiError is an error wrapping multiple validation errors
// returned by ListAidOfferedResp.ValidateAll() if the designated constraints
// aren't met.
type ListAidOfferedRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAidOfferedRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAidOfferedRespMultiError) AllErrors() []error { return m }

// ListAidOfferedRespValidationError is the validation error returned by
// ListAidOfferedResp.Validate if the designated constraints aren't met.
type ListAidOfferedRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAidOfferedRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAidOfferedRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAidOfferedRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAidOfferedRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAidOfferedRespValidationError) ErrorName() string {
	return "ListAidOfferedRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListAidOfferedRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAidOfferedResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAidOfferedRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAidOfferedRespValidationError{}

// Validate checks the field values on ListAidNeedsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAidNeedsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAidNeedsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAidNeedsReqMultiError, or nil if none found.
func (m *ListAidNeedsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAidNeedsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if val := m.GetLatitude(); val < -90 || val >= 90 {
		err := ListAidNeedsReqValidationError{
			field:  "Latitude",
			reason: "value must be inside range [-90, 90)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLongitude(); val < -180 || val >= 180 {
		err := ListAidNeedsReqValidationError{
			field:  "Longitude",
			reason: "value must be inside range [-180, 180)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAidNeedsReqMultiError(errors)
	}

	return nil
}

// ListAidNeedsReqMultiError is an error wrapping multiple validation errors
// returned by ListAidNeedsReq.ValidateAll() if the designated constraints
// aren't met.
type ListAidNeedsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAidNeedsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAidNeedsReqMultiError) AllErrors() []error { return m }

// ListAidNeedsReqValidationError is the validation error returned by
// ListAidNeedsReq.Validate if the designated constraints aren't met.
type ListAidNeedsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAidNeedsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAidNeedsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAidNeedsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAidNeedsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAidNeedsReqValidationError) ErrorName() string { return "ListAidNeedsReqValidationError" }

// Error satisfies the builtin error interface
func (e ListAidNeedsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAidNeedsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAidNeedsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAidNeedsReqValidationError{}

// Validate checks the field values on ListAidNeedsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAidNeedsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAidNeedsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAidNeedsRespMultiError, or nil if none found.
func (m *ListAidNeedsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAidNeedsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAidNeedsRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAidNeedsRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAidNeedsRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListAidNeedsRespMultiError(errors)
	}

	return nil
}

// ListAidNeedsRespMultiError is an error wrapping multiple validation errors
// returned by ListAidNeedsResp.ValidateAll() if the designated constraints
// aren't met.
type ListAidNeedsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAidNeedsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAidNeedsRespMultiError) AllErrors() []error { return m }

// ListAidNeedsRespValidationError is the validation error returned by
// ListAidNeedsResp.Validate if the designated constraints aren't met.
type ListAidNeedsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAidNeedsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAidNeedsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAidNeedsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAidNeedsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAidNeedsRespValidationError) ErrorName() string { return "ListAidNeedsRespValidationError" }

// Error satisfies the builtin error interface
func (e ListAidNeedsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAidNeedsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAidNeedsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAidNeedsRespValidationError{}

// Validate checks the field values on GetAidDetailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAidDetailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAidDetailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAidDetailReqMultiError, or nil if none found.
func (m *GetAidDetailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAidDetailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if val := m.GetLatitude(); val < -90 || val >= 90 {
		err := GetAidDetailReqValidationError{
			field:  "Latitude",
			reason: "value must be inside range [-90, 90)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLongitude(); val < -180 || val >= 180 {
		err := GetAidDetailReqValidationError{
			field:  "Longitude",
			reason: "value must be inside range [-180, 180)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAidDetailReqMultiError(errors)
	}

	return nil
}

// GetAidDetailReqMultiError is an error wrapping multiple validation errors
// returned by GetAidDetailReq.ValidateAll() if the designated constraints
// aren't met.
type GetAidDetailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAidDetailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAidDetailReqMultiError) AllErrors() []error { return m }

// GetAidDetailReqValidationError is the validation error returned by
// GetAidDetailReq.Validate if the designated constraints aren't met.
type GetAidDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAidDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAidDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAidDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAidDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAidDetailReqValidationError) ErrorName() string { return "GetAidDetailReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAidDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAidDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAidDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAidDetailReqValidationError{}

// Validate checks the field values on GetAidDetailResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAidDetailResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAidDetailResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAidDetailRespMultiError, or nil if none found.
func (m *GetAidDetailResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAidDetailResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAid()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAidDetailRespValidationError{
					field:  "Aid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAidDetailRespValidationError{
					field:  "Aid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAid()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAidDetailRespValidationError{
				field:  "Aid",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsMyAid

	// no validation rules for IsMyHelp

	if len(errors) > 0 {
		return GetAidDetailRespMultiError(errors)
	}

	return nil
}

// GetAidDetailRespMultiError is an error wrapping multiple validation errors
// returned by GetAidDetailResp.ValidateAll() if the designated constraints
// aren't met.
type GetAidDetailRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAidDetailRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAidDetailRespMultiError) AllErrors() []error { return m }

// GetAidDetailRespValidationError is the validation error returned by
// GetAidDetailResp.Validate if the designated constraints aren't met.
type GetAidDetailRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAidDetailRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAidDetailRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAidDetailRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAidDetailRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAidDetailRespValidationError) ErrorName() string { return "GetAidDetailRespValidationError" }

// Error satisfies the builtin error interface
func (e GetAidDetailRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAidDetailResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAidDetailRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAidDetailRespValidationError{}

// Validate checks the field values on CreateAidReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateAidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAidReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateAidReqMultiError, or
// nil if none found.
func (m *CreateAidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLatitude(); val < -90 || val >= 90 {
		err := CreateAidReqValidationError{
			field:  "Latitude",
			reason: "value must be inside range [-90, 90)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLongitude(); val < -180 || val >= 180 {
		err := CreateAidReqValidationError{
			field:  "Longitude",
			reason: "value must be inside range [-180, 180)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for Group

	// no validation rules for Emergency

	if l := utf8.RuneCountInString(m.GetContent()); l < 0 || l > 300 {
		err := CreateAidReqValidationError{
			field:  "Content",
			reason: "value length must be between 0 and 300 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Phone

	// no validation rules for Addr

	if len(errors) > 0 {
		return CreateAidReqMultiError(errors)
	}

	return nil
}

// CreateAidReqMultiError is an error wrapping multiple validation errors
// returned by CreateAidReq.ValidateAll() if the designated constraints aren't met.
type CreateAidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAidReqMultiError) AllErrors() []error { return m }

// CreateAidReqValidationError is the validation error returned by
// CreateAidReq.Validate if the designated constraints aren't met.
type CreateAidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAidReqValidationError) ErrorName() string { return "CreateAidReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateAidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAidReqValidationError{}

// Validate checks the field values on CreateAidResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateAidResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAidResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateAidRespMultiError, or
// nil if none found.
func (m *CreateAidResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAidResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateAidRespMultiError(errors)
	}

	return nil
}

// CreateAidRespMultiError is an error wrapping multiple validation errors
// returned by CreateAidResp.ValidateAll() if the designated constraints
// aren't met.
type CreateAidRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAidRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAidRespMultiError) AllErrors() []error { return m }

// CreateAidRespValidationError is the validation error returned by
// CreateAidResp.Validate if the designated constraints aren't met.
type CreateAidRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAidRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAidRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAidRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAidRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAidRespValidationError) ErrorName() string { return "CreateAidRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateAidRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAidResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAidRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAidRespValidationError{}

// Validate checks the field values on CancelAidReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelAidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelAidReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelAidReqMultiError, or
// nil if none found.
func (m *CancelAidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelAidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CancelAidReqMultiError(errors)
	}

	return nil
}

// CancelAidReqMultiError is an error wrapping multiple validation errors
// returned by CancelAidReq.ValidateAll() if the designated constraints aren't met.
type CancelAidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelAidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelAidReqMultiError) AllErrors() []error { return m }

// CancelAidReqValidationError is the validation error returned by
// CancelAidReq.Validate if the designated constraints aren't met.
type CancelAidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelAidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelAidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelAidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelAidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelAidReqValidationError) ErrorName() string { return "CancelAidReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelAidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelAidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelAidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelAidReqValidationError{}

// Validate checks the field values on CancelAidResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelAidResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelAidResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelAidRespMultiError, or
// nil if none found.
func (m *CancelAidResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelAidResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelAidRespMultiError(errors)
	}

	return nil
}

// CancelAidRespMultiError is an error wrapping multiple validation errors
// returned by CancelAidResp.ValidateAll() if the designated constraints
// aren't met.
type CancelAidRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelAidRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelAidRespMultiError) AllErrors() []error { return m }

// CancelAidRespValidationError is the validation error returned by
// CancelAidResp.Validate if the designated constraints aren't met.
type CancelAidRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelAidRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelAidRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelAidRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelAidRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelAidRespValidationError) ErrorName() string { return "CancelAidRespValidationError" }

// Error satisfies the builtin error interface
func (e CancelAidRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelAidResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelAidRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelAidRespValidationError{}

// Validate checks the field values on FinishAidReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FinishAidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinishAidReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FinishAidReqMultiError, or
// nil if none found.
func (m *FinishAidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FinishAidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MessageId

	if len(errors) > 0 {
		return FinishAidReqMultiError(errors)
	}

	return nil
}

// FinishAidReqMultiError is an error wrapping multiple validation errors
// returned by FinishAidReq.ValidateAll() if the designated constraints aren't met.
type FinishAidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinishAidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinishAidReqMultiError) AllErrors() []error { return m }

// FinishAidReqValidationError is the validation error returned by
// FinishAidReq.Validate if the designated constraints aren't met.
type FinishAidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinishAidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinishAidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinishAidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinishAidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinishAidReqValidationError) ErrorName() string { return "FinishAidReqValidationError" }

// Error satisfies the builtin error interface
func (e FinishAidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinishAidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinishAidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinishAidReqValidationError{}

// Validate checks the field values on FinishAidResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FinishAidResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinishAidResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FinishAidRespMultiError, or
// nil if none found.
func (m *FinishAidResp) ValidateAll() error {
	return m.validate(true)
}

func (m *FinishAidResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FinishAidRespMultiError(errors)
	}

	return nil
}

// FinishAidRespMultiError is an error wrapping multiple validation errors
// returned by FinishAidResp.ValidateAll() if the designated constraints
// aren't met.
type FinishAidRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinishAidRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinishAidRespMultiError) AllErrors() []error { return m }

// FinishAidRespValidationError is the validation error returned by
// FinishAidResp.Validate if the designated constraints aren't met.
type FinishAidRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinishAidRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinishAidRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinishAidRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinishAidRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinishAidRespValidationError) ErrorName() string { return "FinishAidRespValidationError" }

// Error satisfies the builtin error interface
func (e FinishAidRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinishAidResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinishAidRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinishAidRespValidationError{}

// Validate checks the field values on CreateAidMessageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAidMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAidMessageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAidMessageReqMultiError, or nil if none found.
func (m *CreateAidMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAidMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := CreateAidMessageReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhone()) < 3 {
		err := CreateAidMessageReqValidationError{
			field:  "Phone",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 0 || l > 300 {
		err := CreateAidMessageReqValidationError{
			field:  "Content",
			reason: "value length must be between 0 and 300 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAidMessageReqMultiError(errors)
	}

	return nil
}

// CreateAidMessageReqMultiError is an error wrapping multiple validation
// errors returned by CreateAidMessageReq.ValidateAll() if the designated
// constraints aren't met.
type CreateAidMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAidMessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAidMessageReqMultiError) AllErrors() []error { return m }

// CreateAidMessageReqValidationError is the validation error returned by
// CreateAidMessageReq.Validate if the designated constraints aren't met.
type CreateAidMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAidMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAidMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAidMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAidMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAidMessageReqValidationError) ErrorName() string {
	return "CreateAidMessageReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAidMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAidMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAidMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAidMessageReqValidationError{}

// Validate checks the field values on CreateAidMessageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAidMessageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAidMessageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAidMessageRespMultiError, or nil if none found.
func (m *CreateAidMessageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAidMessageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAidMessageRespMultiError(errors)
	}

	return nil
}

// CreateAidMessageRespMultiError is an error wrapping multiple validation
// errors returned by CreateAidMessageResp.ValidateAll() if the designated
// constraints aren't met.
type CreateAidMessageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAidMessageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAidMessageRespMultiError) AllErrors() []error { return m }

// CreateAidMessageRespValidationError is the validation error returned by
// CreateAidMessageResp.Validate if the designated constraints aren't met.
type CreateAidMessageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAidMessageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAidMessageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAidMessageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAidMessageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAidMessageRespValidationError) ErrorName() string {
	return "CreateAidMessageRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAidMessageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAidMessageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAidMessageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAidMessageRespValidationError{}

// Validate checks the field values on Aid with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Aid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Aid with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AidMultiError, or nil if none found.
func (m *Aid) ValidateAll() error {
	return m.validate(true)
}

func (m *Aid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Group

	// no validation rules for Emergency

	// no validation rules for Content

	// no validation rules for Distance

	// no validation rules for CreateTime

	// no validation rules for Status

	// no validation rules for ExamineStatus

	// no validation rules for MessageCount

	for idx, item := range m.GetMessage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AidValidationError{
						field:  fmt.Sprintf("Message[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AidValidationError{
						field:  fmt.Sprintf("Message[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AidValidationError{
					field:  fmt.Sprintf("Message[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AidValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AidValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AidValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DisplayPim

	// no validation rules for UpdateTime

	// no validation rules for UserId

	// no validation rules for Address

	if len(errors) > 0 {
		return AidMultiError(errors)
	}

	return nil
}

// AidMultiError is an error wrapping multiple validation errors returned by
// Aid.ValidateAll() if the designated constraints aren't met.
type AidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AidMultiError) AllErrors() []error { return m }

// AidValidationError is the validation error returned by Aid.Validate if the
// designated constraints aren't met.
type AidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AidValidationError) ErrorName() string { return "AidValidationError" }

// Error satisfies the builtin error interface
func (e AidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AidValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MaskPhone

	// no validation rules for Content

	// no validation rules for CreateTime

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DisplayPim

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}
