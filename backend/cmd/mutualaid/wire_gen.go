// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/ucloud/mutualaid/backend/internal/biz/aid"
	"github.com/ucloud/mutualaid/backend/internal/biz/user"
	"github.com/ucloud/mutualaid/backend/internal/conf"
	"github.com/ucloud/mutualaid/backend/internal/data"
	"github.com/ucloud/mutualaid/backend/internal/data/mysql"
	"github.com/ucloud/mutualaid/backend/internal/data/redis"
	"github.com/ucloud/mutualaid/backend/internal/server"
	"github.com/ucloud/mutualaid/backend/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, proxy *conf.Proxy, bizConfig *conf.BizConfig, arg map[string]*conf.TPLArgs, logger log.Logger) (*kratos.App, func(), error) {
	db := mysql.NewDB(confData, logger)
	mysqlData, cleanup, err := mysql.NewData(db, logger)
	if err != nil {
		return nil, nil, err
	}
	userDBRepo := mysql.NewUserDBRepo(mysqlData)
	redisData, cleanup2, err := redis.NewData(confData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userRepository := redis.NewUserRepository(logger, redisData)
	userRepo := data.NewUserRepo(userDBRepo, userRepository)
	userUsecase := user.NewUserUsecase(userRepo, logger)
	userService := service.NewUserService(userUsecase, logger)
	aidRepository := redis.NewAidRepository(logger, redisData)
	mysqlAidRepository := mysql.NewAidRepository(logger, mysqlData)
	aidAidRepository := data.NewAidRepository(aidRepository, mysqlAidRepository, userDBRepo, userRepo)
	transaction := mysql.NewTransaction(mysqlData)
	useCase := aid.NewUseCase(logger, aidAidRepository, arg, transaction)
	mutualAidQueryService := service.NewMutualAidQueryService(useCase)
	userAidQueryService := service.NewUserAidQueryService(useCase, userUsecase, logger)
	userAidManagerService := service.NewUserAidManagerService(useCase)
	examineAidService := service.NewExamineAidService(useCase, userUsecase)

	httpServer := server.NewHTTPServer(confServer, userService, mutualAidQueryService, examineAidService, userAidQueryService, userAidManagerService, logger)
	grpcServer := server.NewGRPCServer(confServer, userService, mutualAidQueryService, userAidQueryService, examineAidService, userAidManagerService, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
